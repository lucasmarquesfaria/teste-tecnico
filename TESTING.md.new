# Guia de Testes do Sistema

## Visão Geral dos Testes

Este sistema utiliza o PHPUnit integrado ao Laravel para executar testes unitários e de integração. Os testes foram projetados para garantir o funcionamento correto de todos os componentes críticos do sistema, especialmente o fluxo de notificações ao concluir ordens de serviço.

## Estrutura de Testes

A estrutura de testes segue as convenções do Laravel/PHPUnit:

```
tests/
├── CreatesApplication.php     # Trait para instanciar a aplicação
├── DatabaseMigrations.php     # Trait personalizada para gerenciar migrações
├── TestCase.php               # Classe base para todos os testes
├── Feature/                   # Testes de integração
│   ├── Commands/              # Testes de comandos Artisan
│   │   └── DebugQueueJobsCommandTest.php
│   ├── Controllers/           # Testes de controllers
│   │   └── ServiceOrderControllerTest.php
│   └── Integration/           # Testes de fluxos completos
│       └── ServiceOrderCompletionFlowTest.php
└── Unit/                      # Testes unitários
    ├── Commands/              # Testes de comandos
    │   └── DebugQueueJobsCommandTest.php
    ├── Events/                # Testes de eventos
    │   └── ServiceOrderCompletedTest.php
    ├── Models/                # Testes de modelos
    │   ├── ServiceOrderTest.php
    │   └── UserTest.php
    ├── Notifications/         # Testes de notificações
    │   └── ServiceOrderCompletedNotificationTest.php
    ├── Policies/              # Testes de políticas de acesso
    │   └── ServiceOrderPolicyTest.php
    └── Services/              # Testes de serviços
        └── ServiceOrderCompletionServiceTest.php
```

## Executando os Testes

### Scripts Disponíveis

O projeto inclui scripts para facilitar a execução dos testes:

#### Windows PowerShell

```powershell
.\run-tests.ps1
```

#### Windows CMD

```cmd
.\run-tests.bat
```

#### Terminal Linux/macOS

```bash
php artisan test
```

### Executando Testes Específicos

```bash
# Executar todos os testes
php artisan test

# Executar apenas testes unitários
php artisan test --testsuite=Unit

# Executar apenas testes de feature/integração
php artisan test --testsuite=Feature

# Executar um arquivo específico
php artisan test tests/Unit/Models/ServiceOrderTest.php

# Executar um teste específico
php artisan test --filter=test_service_order_has_valid_fields
```

## Trait DatabaseMigrations Personalizada

Para resolver problemas com migrações de tabela durante os testes, uma trait personalizada `DatabaseMigrations` foi implementada:

```php
// tests/DatabaseMigrations.php
trait DatabaseMigrations
{
    use RefreshDatabase {
        RefreshDatabase::refreshDatabase as parentRefreshDatabase;
    }

    public function refreshDatabase()
    {
        // Remove sessions table migration temporarily to prevent conflicts
        $this->excludeSessionMigration();

        $this->parentRefreshDatabase();

        // Restore sessions migration file
        $this->restoreSessionMigration();
    }

    // ...
}
```

Esta trait soluciona problemas de conflito na criação da tabela `sessions` durante a execução dos testes.

## Detalhes dos Testes

### Testes de Modelos

#### UserTest

Testa o modelo `User`:
- Campos obrigatórios e validações
- Relacionamentos com ordens de serviço
- Perfis de acesso (cliente/técnico)

#### ServiceOrderTest

Testa o modelo `ServiceOrder`:
- Campos obrigatórios e validações
- Estados possíveis (pendente, em andamento, concluída)
- Relacionamentos com usuários (cliente e técnico)

### Testes de Eventos e Notificações

#### ServiceOrderCompletedTest

Verifica se o evento `ServiceOrderCompleted` funciona corretamente:
- Criação e disparo do evento
- Passagem dos dados corretos da ordem de serviço
- Disparo de notificações associadas

#### ServiceOrderCompletedNotificationTest

Testa a notificação enviada aos clientes:
- Conteúdo e formato da notificação
- Configuração de canais (e-mail)
- Implementação da interface ShouldQueue

### Testes de Políticas de Acesso

#### ServiceOrderPolicyTest

Testa as regras de autorização:
- Permissões de visualização para clientes (apenas suas próprias ordens)
- Permissões de visualização para técnicos (apenas ordens atribuídas)
- Permissões de atualização (apenas técnicos podem atualizar suas ordens)

### Testes de Integração

#### ServiceOrderCompletionFlowTest

Testa o fluxo completo de conclusão de uma ordem:
- Criação de uma ordem por um técnico
- Atualização do status para "concluída"
- Disparo do evento ServiceOrderCompleted
- Envio de notificação ao cliente

#### ServiceOrderControllerTest

Testa os controllers responsáveis pelas ordens:
- Criação de ordens (apenas técnicos)
- Visualização de ordens (com permissões corretas)
- Atualização de status e disparo de eventos

### Testes de Comandos

#### DebugQueueJobsCommandTest

Testa o comando personalizado para visualização de jobs na fila:
- Exibição correta quando não há jobs
- Listagem e formatação dos jobs pendentes

## Factories para Testes

O sistema utiliza factories para facilitar a criação de dados de teste:

### UserFactory

```php
class UserFactory extends Factory
{
    public function client()
    {
        return $this->state(fn (array $attributes) => [
            'role' => 'client',
        ]);
    }

    public function technician()
    {
        return $this->state(fn (array $attributes) => [
            'role' => 'technician',
        ]);
    }
}
```

### ServiceOrderFactory

```php
class ServiceOrderFactory extends Factory
{
    public function pendente()
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pendente',
        ]);
    }

    public function emAndamento()
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'em_andamento',
        ]);
    }

    public function concluida()
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'concluida',
        ]);
    }

    public function comUsuarios(User $client, User $technician)
    {
        return $this->state(fn (array $attributes) => [
            'client_id' => $client->id,
            'technician_id' => $technician->id,
        ]);
    }
}
```

## Prevenção de Envio Duplicado de E-mails

Para prevenir notificações duplicadas, o sistema implementa um mecanismo de cache no listener:

```php
public function handle(ServiceOrderCompleted $event): void
{
    $serviceOrder = $event->serviceOrder;
    
    // Verificar se a notificação já foi enviada
    $cacheKey = 'order_completed_notification_' . $serviceOrder->id;
    if (\Illuminate\Support\Facades\Cache::has($cacheKey)) {
        \Illuminate\Support\Facades\Log::info('Notification for order #' . $serviceOrder->id . ' already sent. Skipping.');
        return;
    }
    
    // [código de envio da notificação]
    
    // Marcar como enviado (expira após 1 hora)
    \Illuminate\Support\Facades\Cache::put($cacheKey, true, 3600);
}
```

## Testes Manuais

Além dos testes automatizados, é recomendável realizar os seguintes testes manuais:

### Fluxo de Teste Manual

1. **Login como Técnico**
   - Acesse http://localhost:8000/login
   - Use credenciais: tecnico@exemplo.com / password

2. **Criar Ordem de Serviço**
   - Vá para "Nova Ordem de Serviço"
   - Preencha os campos obrigatórios
   - Selecione um cliente
   - Salve a ordem

3. **Editar e Concluir a Ordem**
   - Encontre a ordem criada
   - Edite seus detalhes
   - Altere o status para "Concluída"
   - Salve a ordem

4. **Verificar Processamento da Notificação**
   - Execute: `php artisan app:debug-queue-jobs`
   - Verifique se o job aparece na fila
   - Execute: `php artisan queue:work`
   - Confirme que o e-mail foi enviado (verificando logs ou o serviço de e-mail configurado)

5. **Login como Cliente**
   - Acesse http://localhost:8000/login
   - Use credenciais: cliente@exemplo.com / password
   - Verifique se a ordem está visível e marcada como concluída

## Troubleshooting

### Problemas Comuns

1. **Erro na criação de tabelas durante testes**
   - Utilize a trait `DatabaseMigrations` personalizada em vez de `RefreshDatabase`

2. **E-mails não estão sendo enviados**
   - Verifique a configuração de e-mail no arquivo `.env`
   - Certifique-se de que o worker de filas está em execução: `php artisan queue:work`
   - Verifique os logs em `storage/logs/laravel.log`

3. **Erros nos testes de filas**
   - Verifique se a conexão de fila está configurada como `database` no arquivo `.env`
   - Confirme se a tabela `jobs` foi criada corretamente

4. **Envio duplicado de e-mails**
   - Certifique-se de que a solução com cache foi implementada
   - Verifique se existem múltiplos listeners para o mesmo evento

## Conclusão

O sistema possui uma cobertura abrangente de testes que garantem seu funcionamento correto. Ao desenvolver novas funcionalidades, certifique-se de adicionar testes correspondentes para manter a qualidade e estabilidade do código.
