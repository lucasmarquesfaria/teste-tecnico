# Sistema de Gerenciamento de Ordens de Serviço

![Laravel](https://img.shields.io/badge/Laravel-10.x-red)
![PHPUnit](https://img.shields.io/badge/PHPUnit-10.x-blue)
![License](https://img.shields.io/badge/License-MIT-green)

## Sumário

1. [Sobre o Projeto](#sobre-o-projeto)
2. [Recursos](#recursos)
3. [Requisitos do Sistema](#requisitos-do-sistema)
4. [Instalação](#instalação)
5. [Configuração](#configuração)
6. [Uso do Sistema](#uso-do-sistema)
7. [Executando os Testes](#executando-os-testes)
8. [Estrutura do Projeto](#estrutura-do-projeto)
9. [Eventos e Notificações](#eventos-e-notificações)
10. [Filas e Jobs](#filas-e-jobs)
11. [Contribuindo](#contribuindo)
12. [Licença](#licença)

## Sobre o Projeto

Este sistema de gerenciamento de ordens de serviço foi desenvolvido utilizando Laravel, permitindo que técnicos e clientes gerenciem solicitações de serviços. O sistema implementa um fluxo completo desde a criação até a conclusão de ordens de serviço (OS), com notificações automáticas via e-mail quando um serviço é concluído.

A aplicação utiliza:
- Laravel para o backend e frontend
- Blade como template engine
- MySQL/SQLite como banco de dados
- Sistema de autenticação nativo do Laravel
- Eventos e Listeners para gerenciar notificações
- Filas para processamento assíncrono de e-mails
- PHPUnit para testes automatizados

## Recursos

- **Autenticação**: Login e registro para técnicos e clientes
- **Gerenciamento de OS**:
  - Criação de novas ordens de serviço (por técnicos)
  - Visualização de OS (por clientes e técnicos associados)
  - Atualização de status (pendente, em andamento, concluída)
  - Histórico de alterações
- **Notificações**: E-mails automáticos quando uma OS é concluída
- **Dashboard**: Visão geral das ordens de serviço
- **Filtros**: Busca por status, data e termos no título/descrição
- **Controle de Acesso**: Políticas de autorização baseadas em perfis

## Requisitos do Sistema

- PHP 8.1 ou superior
- Composer
- MySQL 5.7+ ou SQLite 3
- Extensões PHP: PDO, Mbstring, Tokenizer, XML, Ctype, JSON
- Node.js e NPM (opcional, para compilação de assets)

## Instalação

### Clone o repositório

```bash
git clone https://github.com/seu-usuario/sistema-ordens-servico.git
cd sistema-ordens-servico
```

### Instale as dependências PHP

```bash
composer install
```

### Configure o ambiente

```bash
# Copie o arquivo de exemplo de ambiente
copy .env.example .env

# Gere a chave de aplicação
php artisan key:generate
```

### Configure o banco de dados

Edite o arquivo `.env` com suas configurações de banco de dados:

```
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=sistema_os
DB_USERNAME=root
DB_PASSWORD=sua_senha
```

Alternativamente, para usar SQLite:

```
DB_CONNECTION=sqlite
# Certifique-se de criar o arquivo database/database.sqlite
```

### Execute as migrações e seeders

```bash
# Crie as tabelas no banco de dados
php artisan migrate

# Popule o banco com dados iniciais
php artisan db:seed
```

## Configuração

### Configuração de E-mail

Para envio de notificações, configure o arquivo `.env` com suas credenciais de e-mail:

```
MAIL_MAILER=smtp
MAIL_HOST=smtp.seu-provedor.com
MAIL_PORT=587
MAIL_USERNAME=seu-email@exemplo.com
MAIL_PASSWORD=sua_senha
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=seu-email@exemplo.com
MAIL_FROM_NAME="${APP_NAME}"
```

Para ambiente de desenvolvimento, você pode usar o Mailtrap ou o driver `log`:

```
MAIL_MAILER=log
```

### Configuração de Filas

Configure o sistema de filas no arquivo `.env`:

```
QUEUE_CONNECTION=database
```

## Uso do Sistema

### Iniciar o servidor local

```bash
php artisan serve
```

Acesse o sistema em: http://localhost:8000

### Processamento de filas (para e-mails)

```bash
# Para executar o worker de filas
php artisan queue:work

# Para monitorar jobs na fila
php artisan app:debug-queue-jobs
```

### Usuários padrão

O sistema inclui usuários pré-configurados para teste:

**Técnico:**
- Email: tecnico@exemplo.com
- Senha: password

**Cliente:**
- Email: cliente@exemplo.com
- Senha: password

## Executando os Testes

O sistema possui testes unitários e de integração. Para executá-los:

### Windows (PowerShell)

```powershell
.\run-tests.ps1
```

### Windows (CMD)

```cmd
.\run-tests.bat
```

### Linux/macOS

```bash
php artisan test
```

Para mais detalhes sobre os testes, consulte o arquivo [TESTING.md](TESTING.md).

## Estrutura do Projeto

```
app/
├── Console/Commands/         # Comandos personalizados do Artisan
├── Events/                   # Eventos da aplicação
│   └── ServiceOrderCompleted.php  # Evento disparado ao concluir uma OS
├── Http/Controllers/         # Controladores da aplicação
│   └── ServiceOrderController.php # Gerencia as ordens de serviço
├── Listeners/                # Ouvintes de eventos
│   └── NotifyClientOfCompletion.php # Envia notificações ao cliente
├── Mail/                     # Classes de e-mail
│   └── ServiceOrderCompletedMail.php # E-mail de OS concluída
├── Models/                   # Modelos do Eloquent
│   ├── ServiceOrder.php      # Modelo de ordem de serviço
│   └── User.php              # Modelo de usuário
├── Notifications/            # Notificações
│   └── ServiceOrderCompletedNotification.php # Notificação de OS concluída
├── Policies/                 # Políticas de autorização
│   └── ServiceOrderPolicy.php # Regras de acesso para ordens de serviço
└── Providers/                # Provedores de serviço
    └── EventServiceProvider.php # Registro de events e listeners
```

## Eventos e Notificações

O sistema utiliza o padrão Observer através de eventos e listeners para notificar os clientes:

1. Quando uma ordem de serviço é marcada como concluída, o evento `ServiceOrderCompleted` é disparado
2. O listener `NotifyClientOfCompletion` escuta esse evento e envia a notificação por e-mail
3. A notificação é processada de forma assíncrona utilizando filas

### Prevenção de e-mails duplicados

O sistema implementa um mecanismo de cache para evitar envio duplicado de notificações:

```php
// Verificar se esta notificação já foi enviada
$cacheKey = 'order_completed_notification_' . $serviceOrder->id;
if (\Illuminate\Support\Facades\Cache::has($cacheKey)) {
    return;
}

// Envio da notificação...

// Marcar como enviado (expira após 1 hora)
\Illuminate\Support\Facades\Cache::put($cacheKey, true, 3600);
```

## Filas e Jobs

As notificações são processadas através de filas para melhorar o desempenho:

- As notificações implementam `ShouldQueue`
- O sistema utiliza a fila `database` por padrão
- Cada job tem configurado até 3 tentativas em caso de falha

### Processamento de filas em produção

Recomendação para ambientes de produção usando Supervisor:

```
[program:laravel-queue]
process_name=%(program_name)s_%(process_num)02d
command=php /caminho/para/projeto/artisan queue:work --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=2
redirect_stderr=true
stdout_logfile=/caminho/para/projeto/storage/logs/worker.log
stopwaitsecs=3600
```

## Contribuindo

Contribuições são bem-vindas! Por favor, siga estes passos:

1. Fork o repositório
2. Crie um branch para sua feature (`git checkout -b feature/nova-funcionalidade`)
3. Faça commit das alterações (`git commit -m 'Adiciona nova funcionalidade'`)
4. Envie para o branch (`git push origin feature/nova-funcionalidade`)
5. Abra um Pull Request

## Licença

Este projeto está licenciado sob a [Licença MIT](https://opensource.org/licenses/MIT) - veja o arquivo LICENSE para mais detalhes.
